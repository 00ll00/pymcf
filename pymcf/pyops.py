import dis
from enum import Enum


class PyOps(Enum):
    POP_TOP = dis.opmap['POP_TOP']
    ROT_TWO = dis.opmap['ROT_TWO']
    ROT_THREE = dis.opmap['ROT_THREE']
    DUP_TOP = dis.opmap['DUP_TOP']
    DUP_TOP_TWO = dis.opmap['DUP_TOP_TWO']
    ROT_FOUR = dis.opmap['ROT_FOUR']
    NOP = dis.opmap['NOP']
    UNARY_POSITIVE = dis.opmap['UNARY_POSITIVE']
    UNARY_NEGATIVE = dis.opmap['UNARY_NEGATIVE']
    UNARY_NOT = dis.opmap['UNARY_NOT']
    UNARY_INVERT = dis.opmap['UNARY_INVERT']
    BINARY_MATRIX_MULTIPLY = dis.opmap['BINARY_MATRIX_MULTIPLY']
    INPLACE_MATRIX_MULTIPLY = dis.opmap['INPLACE_MATRIX_MULTIPLY']
    BINARY_POWER = dis.opmap['BINARY_POWER']
    BINARY_MULTIPLY = dis.opmap['BINARY_MULTIPLY']
    BINARY_MODULO = dis.opmap['BINARY_MODULO']
    BINARY_ADD = dis.opmap['BINARY_ADD']
    BINARY_SUBTRACT = dis.opmap['BINARY_SUBTRACT']
    BINARY_SUBSCR = dis.opmap['BINARY_SUBSCR']
    BINARY_FLOOR_DIVIDE = dis.opmap['BINARY_FLOOR_DIVIDE']
    BINARY_TRUE_DIVIDE = dis.opmap['BINARY_TRUE_DIVIDE']
    INPLACE_FLOOR_DIVIDE = dis.opmap['INPLACE_FLOOR_DIVIDE']
    INPLACE_TRUE_DIVIDE = dis.opmap['INPLACE_TRUE_DIVIDE']
    GET_LEN = dis.opmap['GET_LEN']
    MATCH_MAPPING = dis.opmap['MATCH_MAPPING']
    MATCH_SEQUENCE = dis.opmap['MATCH_SEQUENCE']
    MATCH_KEYS = dis.opmap['MATCH_KEYS']
    COPY_DICT_WITHOUT_KEYS = dis.opmap['COPY_DICT_WITHOUT_KEYS']
    WITH_EXCEPT_START = dis.opmap['WITH_EXCEPT_START']
    GET_AITER = dis.opmap['GET_AITER']
    GET_ANEXT = dis.opmap['GET_ANEXT']
    BEFORE_ASYNC_WITH = dis.opmap['BEFORE_ASYNC_WITH']
    END_ASYNC_FOR = dis.opmap['END_ASYNC_FOR']
    INPLACE_ADD = dis.opmap['INPLACE_ADD']
    INPLACE_SUBTRACT = dis.opmap['INPLACE_SUBTRACT']
    INPLACE_MULTIPLY = dis.opmap['INPLACE_MULTIPLY']
    INPLACE_MODULO = dis.opmap['INPLACE_MODULO']
    STORE_SUBSCR = dis.opmap['STORE_SUBSCR']
    DELETE_SUBSCR = dis.opmap['DELETE_SUBSCR']
    BINARY_LSHIFT = dis.opmap['BINARY_LSHIFT']
    BINARY_RSHIFT = dis.opmap['BINARY_RSHIFT']
    BINARY_AND = dis.opmap['BINARY_AND']
    BINARY_XOR = dis.opmap['BINARY_XOR']
    BINARY_OR = dis.opmap['BINARY_OR']
    INPLACE_POWER = dis.opmap['INPLACE_POWER']
    GET_ITER = dis.opmap['GET_ITER']
    GET_YIELD_FROM_ITER = dis.opmap['GET_YIELD_FROM_ITER']
    PRINT_EXPR = dis.opmap['PRINT_EXPR']
    LOAD_BUILD_CLASS = dis.opmap['LOAD_BUILD_CLASS']
    YIELD_FROM = dis.opmap['YIELD_FROM']
    GET_AWAITABLE = dis.opmap['GET_AWAITABLE']
    LOAD_ASSERTION_ERROR = dis.opmap['LOAD_ASSERTION_ERROR']
    INPLACE_LSHIFT = dis.opmap['INPLACE_LSHIFT']
    INPLACE_RSHIFT = dis.opmap['INPLACE_RSHIFT']
    INPLACE_AND = dis.opmap['INPLACE_AND']
    INPLACE_XOR = dis.opmap['INPLACE_XOR']
    INPLACE_OR = dis.opmap['INPLACE_OR']
    LIST_TO_TUPLE = dis.opmap['LIST_TO_TUPLE']
    RETURN_VALUE = dis.opmap['RETURN_VALUE']
    IMPORT_STAR = dis.opmap['IMPORT_STAR']
    SETUP_ANNOTATIONS = dis.opmap['SETUP_ANNOTATIONS']
    YIELD_VALUE = dis.opmap['YIELD_VALUE']
    POP_BLOCK = dis.opmap['POP_BLOCK']
    POP_EXCEPT = dis.opmap['POP_EXCEPT']
    STORE_NAME = dis.opmap['STORE_NAME']
    DELETE_NAME = dis.opmap['DELETE_NAME']
    UNPACK_SEQUENCE = dis.opmap['UNPACK_SEQUENCE']
    FOR_ITER = dis.opmap['FOR_ITER']
    UNPACK_EX = dis.opmap['UNPACK_EX']
    STORE_ATTR = dis.opmap['STORE_ATTR']
    DELETE_ATTR = dis.opmap['DELETE_ATTR']
    STORE_GLOBAL = dis.opmap['STORE_GLOBAL']
    DELETE_GLOBAL = dis.opmap['DELETE_GLOBAL']
    ROT_N = dis.opmap['ROT_N']
    LOAD_CONST = dis.opmap['LOAD_CONST']
    LOAD_NAME = dis.opmap['LOAD_NAME']
    BUILD_TUPLE = dis.opmap['BUILD_TUPLE']
    BUILD_LIST = dis.opmap['BUILD_LIST']
    BUILD_SET = dis.opmap['BUILD_SET']
    BUILD_MAP = dis.opmap['BUILD_MAP']
    LOAD_ATTR = dis.opmap['LOAD_ATTR']
    COMPARE_OP = dis.opmap['COMPARE_OP']
    IMPORT_NAME = dis.opmap['IMPORT_NAME']
    IMPORT_FROM = dis.opmap['IMPORT_FROM']
    JUMP_FORWARD = dis.opmap['JUMP_FORWARD']
    JUMP_IF_FALSE_OR_POP = dis.opmap['JUMP_IF_FALSE_OR_POP']
    JUMP_IF_TRUE_OR_POP = dis.opmap['JUMP_IF_TRUE_OR_POP']
    JUMP_ABSOLUTE = dis.opmap['JUMP_ABSOLUTE']
    POP_JUMP_IF_FALSE = dis.opmap['POP_JUMP_IF_FALSE']
    POP_JUMP_IF_TRUE = dis.opmap['POP_JUMP_IF_TRUE']
    LOAD_GLOBAL = dis.opmap['LOAD_GLOBAL']
    IS_OP = dis.opmap['IS_OP']
    CONTAINS_OP = dis.opmap['CONTAINS_OP']
    RERAISE = dis.opmap['RERAISE']
    JUMP_IF_NOT_EXC_MATCH = dis.opmap['JUMP_IF_NOT_EXC_MATCH']
    SETUP_FINALLY = dis.opmap['SETUP_FINALLY']
    LOAD_FAST = dis.opmap['LOAD_FAST']
    STORE_FAST = dis.opmap['STORE_FAST']
    DELETE_FAST = dis.opmap['DELETE_FAST']
    GEN_START = dis.opmap['GEN_START']
    RAISE_VARARGS = dis.opmap['RAISE_VARARGS']
    CALL_FUNCTION = dis.opmap['CALL_FUNCTION']
    MAKE_FUNCTION = dis.opmap['MAKE_FUNCTION']
    BUILD_SLICE = dis.opmap['BUILD_SLICE']
    LOAD_CLOSURE = dis.opmap['LOAD_CLOSURE']
    LOAD_DEREF = dis.opmap['LOAD_DEREF']
    STORE_DEREF = dis.opmap['STORE_DEREF']
    DELETE_DEREF = dis.opmap['DELETE_DEREF']
    CALL_FUNCTION_KW = dis.opmap['CALL_FUNCTION_KW']
    CALL_FUNCTION_EX = dis.opmap['CALL_FUNCTION_EX']
    SETUP_WITH = dis.opmap['SETUP_WITH']
    EXTENDED_ARG = dis.opmap['EXTENDED_ARG']
    LIST_APPEND = dis.opmap['LIST_APPEND']
    SET_ADD = dis.opmap['SET_ADD']
    MAP_ADD = dis.opmap['MAP_ADD']
    LOAD_CLASSDEREF = dis.opmap['LOAD_CLASSDEREF']
    MATCH_CLASS = dis.opmap['MATCH_CLASS']
    SETUP_ASYNC_WITH = dis.opmap['SETUP_ASYNC_WITH']
    FORMAT_VALUE = dis.opmap['FORMAT_VALUE']
    BUILD_CONST_KEY_MAP = dis.opmap['BUILD_CONST_KEY_MAP']
    BUILD_STRING = dis.opmap['BUILD_STRING']
    LOAD_METHOD = dis.opmap['LOAD_METHOD']
    CALL_METHOD = dis.opmap['CALL_METHOD']
    LIST_EXTEND = dis.opmap['LIST_EXTEND']
    SET_UPDATE = dis.opmap['SET_UPDATE']
    DICT_MERGE = dis.opmap['DICT_MERGE']
    DICT_UPDATE = dis.opmap['DICT_UPDATE']


ALL = set(PyOps)

JREL = set(op for op in PyOps if op.value in dis.hasjrel) - {PyOps.FOR_ITER}
JABS = set(op for op in PyOps if op.value in dis.hasjabs)
JMP = JREL | JABS

JMP_IF = {
    PyOps.POP_JUMP_IF_FALSE,
    PyOps.POP_JUMP_IF_TRUE,
    PyOps.JUMP_IF_FALSE_OR_POP,
    PyOps.JUMP_IF_TRUE_OR_POP,
}

NORMAL_OPS = ALL - JMP - {PyOps.FOR_ITER, PyOps.RETURN_VALUE, PyOps.RAISE_VARARGS}

if __name__ == '__main__':
    for op in dis.opmap:
        print(f"{op} = dis.opmap['{op}']")
