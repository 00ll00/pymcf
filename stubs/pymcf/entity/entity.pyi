import abc
from .structure import T_Entity
from abc import ABC, abstractmethod
from pymcf.data.data import InGameEntity, InGameIterator
from pymcf.data.nbt import EntityNbtContainer, NbtCompound
from pymcf.data.score import ScoreContainer
from typing import Any, Mapping, Optional, Union, TypeVar, Type


class Identifier(ABC, metaclass=abc.ABCMeta):
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class UUID(Identifier):
    def __init__(self, name: str) -> None: ...

class Name(Identifier):
    def __init__(self, name: str) -> None: ...

class Selector(Identifier):
    def __init__(self, is_self: bool = ..., x: Any | None = ..., y: Any | None = ..., z: Any | None = ..., dx: Any | None = ..., dy: Any | None = ..., dz: Any | None = ..., distance: Any | None = ..., scores: Any | None = ..., tags: Any | None = ..., teams: Any | None = ..., names: Any | None = ..., types: Any | None = ..., predicates: Any | None = ..., x_rotation: Any | None = ..., y_rotation: Any | None = ..., nbt: Any | None = ..., level: Any | None = ..., gamemodes: Any | None = ..., advancements: Any | None = ..., limit: Any | None = ..., sort: Any | None = ...) -> None: ...
    def fork(self, x=..., y=..., z=..., dx=..., dy=..., dz=..., distance=..., scores=..., tags=..., teams=..., names=..., types=..., predicates=..., x_rotation=..., y_rotation=..., nbt=..., level=..., gamemodes=..., advancements=..., limit=..., sort=...): ...

class __Not:
    def __init__(self, inner: Any) -> None: ...
    def __hash__(self): ...

# class n_Self(n_Entity):
#     def __enter__(self) -> None: ...
#     def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
#     def __init__(self, entity: Optional["n_Entity"] = None) -> None: ...
#     def __getattr__(self, item) -> Any: ...
#     def __setattr__(self, key: str, value) -> None: ...
#     @staticmethod
#     def __has_ref() -> bool: ...
#     @staticmethod
#     def __get_ref() -> n_Entity | None: ...

# Self: n_Self

__Entity = TypeVar("__Entity", bound=T_Entity)

class EntityBehavior(ABC, metaclass=abc.ABCMeta):
    def tp(self, *pos) -> None: ...
    def kill(self) -> None: ...


class n_Entity(InGameEntity, ScoreContainer, EntityNbtContainer[__Entity], EntityBehavior, ABC):
    id_tag: str
    _identifier: Identifier
    identifier: Identifier
    def __init__(self, identifier: Identifier = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

    @classmethod
    def entity_type(cls) -> Optional[str]: ...

    @classmethod
    def class_tag(cls) -> str: ...

    @classmethod
    def each_one(cls: Type[_T_E]) -> n_Entities[_T_E]: ...

    @classmethod
    def selector(cls) -> Selector: ...


_T_E = TypeVar("_T_E", bound=n_Entity)

class n_Newable(n_Entity[__Entity], ABC, metaclass=abc.ABCMeta):
    type_name: str
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, pos, nbt: Optional[Union[NbtCompound, Mapping[str, Any]]]) -> None: ...

    @classmethod
    @abstractmethod
    def entity_type(cls) -> str: ...

class n_Entities(InGameIterator[_T_E]):
    def __init__(self, cls: Type[_T_E], identifier: Identifier = ...) -> None: ...
    def __enter__(self) -> _T_E: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def filtered(self, x=..., y=..., z=..., dx=..., dy=..., dz=..., distance=..., scores=..., tags=..., teams=..., names=..., types=..., predicates=..., x_rotation=..., y_rotation=..., nbt=..., level=..., gamemodes=..., advancements=..., limit=..., sort=...) -> n_Entities[_T_E]: ...
