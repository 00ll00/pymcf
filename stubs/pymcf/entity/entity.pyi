import abc
from .structure import T_Entity
from abc import ABC, abstractmethod
from pymcf.data.data import InGameEntity, InGameIter
from pymcf.data.nbt import EntityNbtContainer, NbtCompound
from pymcf.data.score import ScoreContainer
from typing import Any, Mapping, Optional, Union, TypeVar


class Identifier(ABC, metaclass=abc.ABCMeta):
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class UUID(Identifier):
    def __init__(self, name: str) -> None: ...

class Name(Identifier):
    def __init__(self, name: str) -> None: ...

class Selector(Identifier):
    def __init__(self, is_self: bool = ..., x: Any | None = ..., y: Any | None = ..., z: Any | None = ..., dx: Any | None = ..., dy: Any | None = ..., dz: Any | None = ..., distance: Any | None = ..., scores: Any | None = ..., tags: Any | None = ..., teams: Any | None = ..., names: Any | None = ..., types: Any | None = ..., predicates: Any | None = ..., x_rotation: Any | None = ..., y_rotation: Any | None = ..., nbt: Any | None = ..., level: Any | None = ..., gamemodes: Any | None = ..., advancements: Any | None = ..., limit: Any | None = ..., sort: Any | None = ...) -> None: ...
    def fork(self, x=..., y=..., z=..., dx=..., dy=..., dz=..., distance=..., scores=..., tags=..., teams=..., names=..., types=..., predicates=..., x_rotation=..., y_rotation=..., nbt=..., level=..., gamemodes=..., advancements=..., limit=..., sort=...): ...

class __Not:
    def __init__(self, inner: Any) -> None: ...
    def __hash__(self): ...

class _Self(InGameEntity):
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def __init__(self, entity: _Entity) -> None: ...
    def __getattr__(self, item) -> Any: ...
    def __setattr__(self, key: str, value) -> None: ...

__Entity = TypeVar("__Entity", bound=T_Entity)

class _Entity(InGameEntity, ScoreContainer, EntityNbtContainer[__Entity], ABC):
    def __init__(self, identifier: Identifier) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    @classmethod
    def class_tag(cls) -> str: ...

_T_E = TypeVar("_T_E", bound=_Entity)

class _Newable(_Entity[__Entity], ABC, metaclass=abc.ABCMeta):
    @classmethod
    @abstractmethod
    def entity_type(cls) -> str: ...
    type_name: str
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, pos, nbt: Optional[Union[NbtCompound, Mapping[str, Any]]]) -> None: ...
    @classmethod
    def each_one(cls) -> _Entities[_T_E]: ...
    @classmethod
    def selector(cls) -> Selector: ...

class _NormalEntity(_Newable[__Entity], ABC, metaclass=abc.ABCMeta):
    def tp(self, *pos) -> None: ...
    def kill(self) -> None: ...

class _Entities(InGameIter[_T_E]):
    def __init__(self, cls, identifier: Identifier = ...) -> None: ...
    def __enter__(self) -> _T_E: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def filtered(self, **kwargs) -> _Entities[_T_E]: ...

class __Marker(T_Entity):
    data: NbtCompound

class Marker(_NormalEntity[__Marker]):
    @classmethod
    def entity_type(cls) -> str: ...
    def __init__(self, pos, nbt: Optional[NbtCompound]) -> None: ...
