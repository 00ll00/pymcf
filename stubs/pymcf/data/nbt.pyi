import abc
from .._frontend import MCFContext as MCFContext
from .data import InGameData as InGameData
from abc import ABC
from pymcf.util import lazy as lazy, staticproperty as staticproperty
from pymcf.jsontext import IJsonText as IJsonText, JsonText as JsonText, JsonTextComponent as JsonTextComponent
from pymcf.operations import NbtCopyOp as NbtCopyOp, NbtSetScoreOp as NbtSetScoreOp
from typing import Any, Dict, Iterable, List, Mapping, Optional, Tuple, Union, TypeVar, Generic


class NbtData(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    as_byte: NbtData
    as_short: NbtData
    as_int: NbtData
    as_long: NbtData
    as_float: NbtData
    as_double: NbtData
    json: JsonText
    @staticmethod
    def convert_from(data: Any) -> NbtData: ...

class NbtCompound(Dict[str, NbtData], NbtData):
    def __init__(self, data: Optional[Mapping] = ...) -> None: ...
    def __getitem__(self, k: str) -> NbtData: ...
    def __setitem__(self, k: str, v: Union[NbtData, Any]): ...
    def update(self, __m: Mapping, **kwargs) -> None: ...
    def clear(self) -> None: ...

class NbtList(List[NbtData], NbtData):
    def __init__(self, data: Optional[List] = ...) -> None: ...
    def __getitem__(self, i: int): ...
    def __setitem__(self, i: int, o: Union[NbtData, Any]): ...
    def append(self, __object: Union[NbtData, Any]) -> None: ...
    def extend(self, __iterable: Iterable[Union[NbtData, Any]]) -> None: ...
    def clear(self) -> None: ...
    def remove(self, __value: NbtData) -> None: ...
    def insert(self, __index: int, __object: NbtData) -> None: ...

class NbtString(NbtData):
    def __init__(self, value: Optional[str]) -> None: ...

class NbtByte(NbtData):
    def __init__(self, value: Optional[int]) -> None: ...

class NbtShort(NbtData):
    def __init__(self, value: Optional[int]) -> None: ...

class NbtInt(NbtData):
    def __init__(self, value: Optional[int]) -> None: ...

class NbtLong(NbtData):
    def __init__(self, value: Optional[int]) -> None: ...

class NbtFloat(NbtData):
    def __init__(self, value: Optional[float]) -> None: ...

class NbtDouble(NbtData):
    def __init__(self, value: Optional[float]) -> None: ...

class NbtByteArray(Tuple[NbtByte], NbtData):
    def __new__(cls, data: Optional[Tuple[int]]): ...
    def __init__(self, _) -> None: ...

class NbtIntArray(Tuple[NbtInt], NbtData):
    def __new__(cls, data: Optional[Tuple[int]]): ...
    def __init__(self, _) -> None: ...

class NbtLongArray(Tuple[NbtLong], NbtData):
    def __new__(cls, data: Optional[Tuple[int]]): ...
    def __init__(self, _) -> None: ...

class Nbt(InGameData, IJsonText):
    def __init__(self, owner: Optional['NbtContainer'] = ..., path: str = ..., _type: str = ...) -> None: ...
    @property
    def as_byte(self): ...
    @property
    def as_short(self): ...
    @property
    def as_int(self): ...
    @property
    def as_long(self): ...
    @property
    def as_float(self): ...
    @property
    def as_double(self): ...
    @property
    def json(self) -> JsonText: ...
    def __getitem__(self, item): ...
    def __getattr__(self, item): ...
    def __setitem__(self, key, value) -> None: ...
    def __setattr__(self, key: str, value): ...
    def set_value(self, value) -> None: ...

_T_Nbt = TypeVar("_T_Nbt")

class NbtContainer(Generic[_T_Nbt], ABC):
    @property
    def nbt(self) -> _T_Nbt: ...
    SYS: StorageNbtContainer

class EntityNbtContainer(NbtContainer[_T_Nbt]):
    def __init__(self, identifier) -> None: ...

class StorageNbtContainer(NbtContainer[_T_Nbt]):
    def __init__(self, name) -> None: ...

class BlockNbtContainer(NbtContainer[_T_Nbt]):
    def __init__(self, pos) -> None: ...
