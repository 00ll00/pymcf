from abc import ABC
from numbers import Number

from pymcf._frontend.context import MCFContext as MCFContext
from pymcf.util import lazy as lazy, staticproperty as staticproperty
from pymcf.data.data import InGameData as InGameData
from pymcf.entity import Identifier
from pymcf.jsontext import IJsonText as IJsonText, JsonText as JsonText, JsonTextComponent as JsonTextComponent
from pymcf.math.math import Integral as Integral, Numeric
from pymcf.operations import DefScoreBoardOp as DefScoreBoardOp, ScoreAddScoreOp as ScoreAddScoreOp, ScoreAddValueOp as ScoreAddValueOp, ScoreCopyOp as ScoreCopyOp, ScoreDivScoreOp as ScoreDivScoreOp, ScoreEQScoreOp as ScoreEQScoreOp, ScoreEQValueOp as ScoreEQValueOp, ScoreGEScoreOp as ScoreGEScoreOp, ScoreGEValueOp as ScoreGEValueOp, ScoreGTScoreOp as ScoreGTScoreOp, ScoreGTValueOp as ScoreGTValueOp, ScoreLEScoreOp as ScoreLEScoreOp, ScoreLEValueOp as ScoreLEValueOp, ScoreLTScoreOp as ScoreLTScoreOp, ScoreLTValueOp as ScoreLTValueOp, ScoreModScoreOp as ScoreModScoreOp, ScoreMulScoreOp as ScoreMulScoreOp, ScoreResetValueOp as ScoreResetValueOp, ScoreSetValueOp as ScoreSetValueOp, ScoreSubScoreOp as ScoreSubScoreOp, ScoreSubValueOp as ScoreSubValueOp, raw as raw
from typing import Any, Optional, Union


class Scoreboard:
    def __new__(cls, name: str, scb_type: str = ...): ...
    name: str
    type: str
    def __init__(self, name: str, scb_type: str = ..., display: JsonText | Any = None) -> None: ...
    @staticmethod
    def new_dummy(): ...
    SYS: Scoreboard

class _Container:
    def __getattr__(self, item) -> Score: ...
    def __setattr__(self, key, value: Any): ...
    def __getitem__(self, item: str) -> Score: ...
    def __setitem__(self, key: str, value: Any): ...

class ScoreContainer(ABC):
    def __init__(self, identifier: Identifier) -> None: ...
    @property
    def score(self) -> _Container: ...

class ScoreDummy(ScoreContainer):
    def __init__(self, name: str) -> None: ...
    @staticmethod
    def new_var(group: str = ...): ...
    @staticmethod
    def const(value: int): ...

class Score(InGameData, IJsonText, Integral):
    entity: ScoreContainer
    objective: Scoreboard
    identifier: str
    def __init__(self, value: Number | Numeric | None = ..., entity: ScoreContainer | None = ..., objective: Optional[Scoreboard] = ...) -> None: ...
    def __hash__(self): ...
    @property
    def json(self) -> JsonText: ...
    @staticmethod
    def const(value: int): ...
    def set_value(self, value) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __eq__(self, other): ...
    def __add__(self, other): ...
    def __iadd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __isub__(self, other): ...
    def __mul__(self, other): ...
    def __imul__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def __itruediv__(self, other): ...
    def __floordiv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __mod__(self, other): ...
    def __imod__(self, other): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __abs__(self) -> Score: ...
    def __rshift__(self, other): ...
    def __rrshift__(self, other) -> None: ...
    def __lshift__(self, other): ...
    def __rlshift__(self, other) -> None: ...
    def __bool_and__(self, other): ...
    def __bool_or__(self, other): ...
    def __bool_not__(self): ...
Int = Score

class Bool(Score):
    def _transfer_to_(self, other): ...
    def _structure_new_(self) -> Bool: ...
    def _compatible_to_(self, other) -> bool: ...
    def __init__(self, value: Optional[Union[bool, Any]] = ..., entity: Optional[ScoreContainer] = ..., objective: Optional[Scoreboard] = ...) -> None: ...
