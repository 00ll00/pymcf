import abc
from abc import ABC, abstractmethod
from typing import Iterator, TypeVar

class InGameObj(ABC, metaclass=abc.ABCMeta):
    def _compatible_to_(self, other) -> bool: ...
    @abstractmethod
    def _transfer_to_(self, other): ...
    @abstractmethod
    def _structure_new_(self) -> "InGameObj": ...

class InGameData(InGameObj, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def set_value(self, value): ...
    def __bool_and__(self, other): ...
    def __bool_or__(self, other): ...
    def __bool_not__(self): ...

class InGameEntity(InGameObj, ABC, metaclass=abc.ABCMeta):
    def __init__(self, identifier) -> None: ...
    @abstractmethod
    def __enter__(self): ...
    @abstractmethod
    def __exit__(self, exc_type, exc_val, exc_tb): ...
T = TypeVar('T', bound=InGameData)

class InGameIter(InGameObj, Iterator[T], ABC, metaclass=abc.ABCMeta):
    def __iter__(self): ...
