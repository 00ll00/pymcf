import abc
from abc import ABC, abstractmethod
from typing import Iterator, TypeVar

from pymcf.data import Score
from pymcf.entity import Entity


class InGameObj(ABC, metaclass=abc.ABCMeta):
    def _compatible_to_(self, other) -> bool: ...
    @abstractmethod
    def _transfer_to_(self, other): ...
    @abstractmethod
    def _structure_new_(self) -> "InGameObj": ...

class InGameData(InGameObj, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def set_value(self, value): ...
    def __bool_and__(self, other): ...
    def __bool_or__(self, other): ...
    def __bool_not__(self): ...

class InGameEntity(InGameObj, Entity, ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __enter__(self): ...
    @abstractmethod
    def __exit__(self, exc_type, exc_val, exc_tb): ...
T_V = TypeVar('T_V', bound=InGameData)

class InGameIterator(InGameObj, Iterator[T_V], ABC, metaclass=abc.ABCMeta):
    def __iter__(self) -> Iterator[T_V]: ...
    def __next__(self) -> T_V: ...
    def _iter_init_(self): ...
    def _iter_next_(self, brk_flg: Score) -> T_V: ...
    def _iter_end_(self): ...